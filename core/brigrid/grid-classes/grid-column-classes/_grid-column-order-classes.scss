@mixin grid-column-order-classes($options: $grid-classes-default-options, $grid: $default-grid) {
    $default-options: $grid-classes-default-options;
    $prefix: get-map-value('prefix', $options, $default-options);
    $names-delimiter: get-map-value('names-delimiter', $options, $default-options);
    $modifier-delimiter: get-map-value('modifier-delimiter', $options, $default-options);
    $breakpoint-delimiter: get-map-value('breakpoint-delimiter', $options, $default-options);
    $components: get-map-value('components', $options);

    $default-names: get-map-value('names', $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);
    $order-name: get-map-value('order', $names, $default-names);
    $columns: get-grid-value('columns', $grid);

    $base-name: list-to-string(($prefix, $column-name), $names-delimiter);
    
    @for $i from -1 through $columns {
        $modifier-name: list-to-string(($order-name, $i), $names-delimiter);
        $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter);
        .#{$class-name} {
            @include grid-column-order(
                $order: $i,
                $grid: $grid
            );
        }
    }
    @if (index($components, 'column-order-media') != null) {
        @include grid-media($grid: $grid) {
            @for $i from -1 through $columns {
                $modifier-name: list-to-string(($order-name, $i), $names-delimiter);
                $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter)
                       + $breakpoint-delimiter
                       + $_grid-media-bp-name;
                .#{$class-name} {
                    @include grid-column-order(
                        $order: $i,
                        $grid: $grid
                    );
                }
            }
        }
    }
}