@mixin grid-column-base-classes($grid: $default-grid, $options: $grid-classes-default-options) {
    $default-options: $grid-classes-default-options;
    $default-names: get-map-value('names', $default-options);
    $prefix: get-map-value('prefix', $options, $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);

    .#{$prefix}#{$column-name} {
        @include grid-column-base($grid: $grid);
        @include grid-column-gutter($grid: $grid);
    }
}

@mixin grid-column-width-classes($grid: $default-grid, $options: $grid-classes-default-options) {
    $default-options: $grid-classes-default-options;
    $default-names: get-map-value('names', $default-options);
    $prefix: get-map-value('prefix', $options, $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);
    $components: get-map-value('components', $options);
    $columns: get-grid-value('columns', $grid);
    
    @for $i from 1 through $columns {
        .#{$prefix}#{$column-name}-#{$i} {
            @include grid-column-width(
                $columns: $i,
                $grid: $grid
            );
        }
    }

    @if (index($components, 'column-media') != null) {
        $breakpoints: get-grid-value('breakpoints', $grid);
        @each $bp-name, $bp-value in $breakpoints {
            @if ($bp-name=='xs') {
                @include media-breakpoint-before(sm) {
                    @for $i from 1 through $columns {
                        .#{$prefix}#{$column-name}-#{$bp-name}-#{$i} {
                            @include grid-column-width(
                                $columns: $i,
                                $grid: $grid
                            );
                        }
                    }
                }
            } @else {
                @include media-breakpoint-from($bp-name) {
                    @for $i from 1 through $columns {
                        .#{$prefix}#{$column-name}-#{$bp-name}-#{$i} {
                            @include grid-column-width(
                                $columns: $i,
                                $grid: $grid
                            );
                        }
                    }
                }
            }
        }
    }
}

@mixin grid-column-order-classes($grid: $default-grid, $options: $grid-classes-default-options) {
    $default-options: $grid-classes-default-options;
    $default-names: get-map-value('names', $default-options);
    $prefix: get-map-value('prefix', $options, $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);
    $order-name: get-map-value('order', $names, $default-names);
    $columns: get-grid-value('columns', $grid);
    
    @for $i from 1 through $columns {
        .#{$prefix}#{$column-name}-#{$order-name}-#{$i} {
            @include grid-column-order(
                $order: $i,
                $grid: $grid
            );
        }
    }
}

@mixin grid-column-align-classes($grid: $default-grid, $options: $grid-classes-default-options) {
    $default-options: $grid-classes-default-options;
    $default-names: get-map-value('names', $default-options);
    $prefix: get-map-value('prefix', $options, $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);

    $h-align-name: map-get($names, 'horizontal-alignment');
    $h-alignments: ('left', 'center', 'right');
    @each $h-align in $h-alignments {
        .#{$prefix}#{$column-name}-#{$h-align-name}-#{$h-align} {
            @include grid-column-align(
                $align-x: $h-align,
                $grid: $grid
            );
        }
    }

    $v-align-name: map-get($names, 'vertical-alignment');
    $v-alignments: ('top', 'center', 'bottom');
    @each $v-align in $v-alignments {
        .#{$prefix}#{$column-name}-#{$v-align-name}-#{$v-align} {
            @include grid-column-align(
                $align-y: $v-align,
                $grid: $grid
            );
        }
    }
}


@mixin grid-column-classes($grid: $default-grid, $options: $grid-classes-default-options) {
    $default-options: $grid-classes-default-options;
    $default-names: get-map-value('names', $default-options);
    $prefix: get-map-value('prefix', $options, $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);
    $components: get-map-value('components', $options);

    @include grid-column-base-classes(
        $grid: $grid,
        $options: $options
    );

    @include grid-column-width-classes(
        $grid: $grid,
        $options: $options
    );

    $driver: get-grid-value('driver', $grid);

    @if ($driver == flex) {
        @if (index($components, 'column-alignment') != null) {
            @include grid-column-align-classes(
                $grid: $grid,
                $options: $options
            );
        }
        @if (index($components, 'column-order') != null) {
            @include grid-column-order-classes(
                $grid: $grid,
                $options: $options
            );
        }
    }
}