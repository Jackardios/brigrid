@charset "UTF-8";

// flex driver based grid-container
%_grid-container--flex {
    display: flex;
    flex-wrap: wrap;
    box-sizing: border-box;
}

/// Creates a grid container based on flexbox
///
/// @name Grid container (flex driver)
///
/// @group components
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings will be used to create the grid container.
///     By default, the global '$default-grid' will be used.
///
/// @example scss
///     $example-grid: (
///         driver: flex,
///         breakpoints: (
///             xs: 0,
///             sm: 576px,
///             md: 768px,
///             lg: 992px,
///             xl: 1200px,
///             xx: 1600px
///         ),
///         align-x: (
///             md: left,
///             lg: center,
///             xl: right
///         ),
///         align-y: (
///             md: top,
///             lg: center,
///             xl: bottom
///         ),
///         gutter: (md: 10px, lg: 20px, xl: 30px),
///         collapse: true
///     );
///
///     .element {
///         @include grid-container(
///             $grid: $example-grid
///         );
///     }
///
/// @example css
///     .element {
///         display: flex;
///         flex-wrap: wrap;
///         box-sizing: border-box;
///         justify-content: flex-end;
///         align-items: flex-end;
///         margin-left: -15px;
///         margin-right: -15px;
///         flex-direction: row;
///     }
///     @media screen and (max-width: 991px) {
///         .element {
///             margin-left: -5px;
///             margin-right: -5px;
///             justify-content: flex-start;
///             align-items: flex-start;
///         }
///     }
///     @media screen and (min-width: 992px) and (max-width: 1199px) {
///         .element {
///             margin-left: -10px;
///             margin-right: -10px;
///             justify-content: center;
///             align-items: center;
///         }
///     }

@mixin grid-container--flex($grid: $default-grid) {
    @extend %_grid-container--flex;

    flex-wrap: get-grid-value(wrap, $grid);


    @include grid-container-align($grid: $grid);
    
    // collapse
    $collapse: get-grid-value(collapse, $grid);
    @if ($collapse) {
        @include grid-collapse($grid: $grid);
    }

    // Reverse
    $reversed: get-grid-value(reversed, $grid);
    @if $reversed == true {
        flex-direction: row-reverse;
    } @else {
        flex-direction: row;
    }
}


// float driver based grid-container
%_grid-container--float {
    box-sizing: border-box;
    &::before,
    &::after {
        display: table;
        content: "";
    }
    &::after {
        clear: both;
    }
}

/// Creates a grid container based on float
///
/// @name Grid container (float driver)
///
/// @group features
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings will be used to create the grid container.
///     By default, the global '$default-grid' will be used.
///
/// @example scss
///     $example-grid: (
///         driver: float,
///         breakpoints: (
///             xs: 0,
///             sm: 576px,
///             md: 768px,
///             lg: 992px,
///             xl: 1200px,
///             xx: 1600px
///         ),
///         align-x: (
///             md: left,
///             lg: center,
///             xl: right
///         ),
///         align-y: (
///             md: top,
///             lg: center,
///             xl: bottom
///         ),
///         gutter: (md: 10px, lg: 20px, xl: 30px),
///         collapse: true
///     );
///
///     .element {
///         @include grid-container(
///             $grid: $example-grid
///         );
///     }
///
/// @example css
///     .element {
///         box-sizing: border-box;
///         margin-left: -15px;
///         margin-right: -15px;
///     }
///     .element::before, .element::after {
///         display: table;
///         content: "";
///     }
///     .element::after {
///         clear: both;
///     }
///     @media screen and (max-width: 991px) {
///         .element {
///             margin-left: -5px;
///             margin-right: -5px;
///         }
///     }
///     @media screen and (min-width: 992px) and (max-width: 1199px) {
///         .element {
///             margin-left: -10px;
///             margin-right: -10px;
///         }
///     }

@mixin grid-container--float($grid: $default-grid) {
    @extend %_grid-container--float;

    // collapse
    $collapse: get-grid-value(collapse, $grid);
    @if ($collapse) {
        @include grid-collapse($grid: $grid);
    }
}


/// Creates a grid container
///
/// @name Grid container
///
/// @group features
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings will be used to create the grid container.
///     By default, the global '$default-grid' will be used.

@mixin grid-container($grid: $default-grid) {
    $driver: get-grid-value(driver, $grid);
    @if ($driver == flex) {
        @include grid-container--flex($grid: $grid);
    } @else if ($driver == float) {
        @include grid-container--float($grid: $grid);
    } @else {
        @error "Incorrect driver value: '#{$driver}'";
    }
}
