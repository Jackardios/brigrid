// flex driver based grid-container
%_grid-container--flex {
    display: flex;
    flex-wrap: wrap;
    box-sizing: border-box;
}

@mixin grid-container-align($align-x: none, $align-y: none, $grid: $default-grid) {
    $driver: get-grid-value(driver, $grid);
    $reversed: get-grid-value(reversed, $grid);
    @if ($driver == flex) {
        // X-axis alignment
        @if ($align-x != none) {
            $allowed-align-x-values: (flex-start, flex-end, center, space-between, space-around);
            @if ($align-x == left and $reversed == false) or
                ($align-x == right and $reversed == true) {
                justify-content: flex-start;
            } @else if ($align-x == left and $reversed == true) or
                       ($align-x == right and $reversed == false) {
                justify-content: flex-end;
            } @else if (index($allowed-align-x-values, $align-x) != null) {
                justify-content: $align-x;
            } @else {
                @error "Unknown $align-x value: '#{$align-x}'";
            }
        }

        // Y-axis alignment
        @if ($align-y != none) {
            $allowed-align-y-values: (flex-start, flex-end, center, baseline, stretch, auto);
            @if ($align-y == top) {
                align-items: flex-start;
            } @else if ($align-y == bottom) {
                align-items: flex-end;
            } @else if (index($allowed-align-y-values, $align-y) != null) {
                align-items: $align-y;
            } @else {
                @error "Unknown $align-y value: '#{$align-y}'";
            }
        }
    } @else {
        @warn "Driver '#{$driver}' is not support alignment";
    }
}

@mixin grid-container--flex($grid: $default-grid) {
    @extend %_grid-container--flex;

    flex-wrap: get-grid-value(wrap, $grid);

    $collapse: get-grid-value(collapse, $grid);
    $align-x: get-grid-value(align-x, $grid);
    $align-y: get-grid-value(align-y, $grid);
    $reversed: get-grid-value(reversed, $grid);

    @include grid-container-align($align-x, $align-y, $grid: $grid);
    // collapse
    @if ($collapse) {
        @include grid-collapse($grid);
    }

    // Reverse
    @if $reversed == true {
        flex-direction: row-reverse;
    } @else {
        flex-direction: row;
    }
}

// float driver based grid-container
%_grid-container--float {
    box-sizing: border-box;
    &::before,
    &::after {
        display: table;
        content: "";
    }
    &::after {
        clear: both;
    }
}

@mixin grid-container--float($grid: $default-grid) {
    @extend %_grid-container--float;

    // collapse
    $collapse: get-grid-value(collapse, $grid);
    @if ($collapse) {
        @include grid-collapse($grid);
    }
}

//common grid-container mixin
@mixin grid-container($grid: $default-grid) {
    $driver: get-grid-value(driver, $grid);
    @if ($driver == flex) {
        @include grid-container--flex($grid);
    } @else if ($driver == float) {
        @include grid-container--float($grid);
    } @else {
        @error "Incorrect driver value: '#{$driver}'";
    }
}
