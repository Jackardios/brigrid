@charset "UTF-8";

/// Creates grid columns alignment in container (Supports only flex driver)
///
/// @name Grid container columns alignment
///
/// @group components
///
/// @argument {string | map} $align-x [null]
///     Specifies the horizontal alignment of the container columns.
///     It can be indicated by:
///     1) a string (null | flex-start | flex-end | left | right | center | baseline | stretch | auto)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the horizontal alignment of the container columns
///         (Example: (md: left, lg: center, xl: right))
///     By default, the value of align-x in the grid map will be used
///
/// @argument {string | map} $align-y [null]
///     Specifies the vertical alignment of the container columns
///     It can be indicated by:
///     1) a string (null | flex-start | flex-end | top | bottom | center | baseline | stretch | auto)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the vertical alignment of the container columns
///         (Example: (md: top, lg: center, xl: bottom))
///     By default, the value of align-y in the grid map will be used
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings (driver, breakpoints) will be used to create an alignment of the container columns.
///     By default, the global '$default-grid' will be used.
///
/// @example scss
///     $example-grid: prepare-grid((
///         driver: flex,
///         align-x: left, // will be ignored, because it uses align-x declared in grid-column-align
///         align-y: top, // will be ignored, because it uses align-y declared in grid-column-align
///         breakpoints: (
///             xs: 0,
///             sm: 576px,
///             md: 768px,
///             lg: 992px,
///             xl: 1200px,
///             xx: 1600px
///         )
///     ));
///     .element {
///         @include grid-container-align(
///             $align-x: (
///                 md: left,
///                 lg: center,
///                 xl: right
///             ),
///             $align-y: (
///                 md: top,
///                 lg: center,
///                 xl: bottom
///             ),
///             $grid: $example-grid
///         );
///     }
///
/// @example css
///     .element {
///         justify-content: flex-start;
///         align-items: flex-start; 
///     }
///     @media only screen and (min-width: 992px) {
///         .element {
///             justify-content: center;
///             align-items: center;
///         }
///     }
///     @media only screen and (min-width: 1200px) {
///         .element {
///             justify-content: flex-end;
///             align-items: flex-end;
///         } 
///     }

@mixin grid-container-align($align-x: null, $align-y: null, $grid: $default-grid) {
    $driver: get-grid-value(driver, $grid);
    @if ($driver == flex) {
        $reversed: get-grid-value(reversed, $grid);
        @if ($align-x == null) {
            $align-x: get-grid-value(align-x, $grid);
        }
        @if ($align-y == null) {
            $align-y: get-grid-value(align-y, $grid);
        }

        // X-axis alignment
        @if ($align-x != null) {
            $align-x: _convert-to-media-map($align-x, $grid);
            $grid: set-grid-value(align-x, $align-x $grid);
            @include _for-media-map($align-x, $grid) {
                $bp-align-x: $_for-media-map-value;
                $allowed-align-x-values: (flex-start, flex-end, center, space-between, space-around);
                @if ($bp-align-x == left and $reversed == false) or
                    ($bp-align-x == right and $reversed == true) {
                    justify-content: flex-start;
                } @else if ($bp-align-x == left and $reversed == true) or
                           ($bp-align-x == right and $reversed == false) {
                    justify-content: flex-end;
                } @else if (index($allowed-align-x-values, $bp-align-x) != null) {
                    justify-content: $bp-align-x;
                } @else {
                    @error "Unknown $align-x value: '#{$bp-align-x}'";
                }
            }
        }

        // Y-axis alignment
        @if ($align-y != null) {
            $align-y: _convert-to-media-map($align-y, $grid);
            $grid: set-grid-value(align-y, $align-y $grid);
            @include _for-media-map($align-y, $grid) {
                $bp-align-y: $_for-media-map-value;
                $allowed-align-y-values: (flex-start, flex-end, center, baseline, stretch, auto);
                @if ($bp-align-y == top) {
                    align-items: flex-start;
                } @else if ($bp-align-y == bottom) {
                    align-items: flex-end;
                } @else if (index($allowed-align-y-values, $bp-align-y) != null) {
                    align-items: $bp-align-y;
                } @else {
                    @error "Unknown $align-y value: '#{$bp-align-y}'";
                }
            }
        }
    } @else {
        @warn "Driver '#{$driver}' is not support alignment";
    }
}
